---
import "../../public/global.css";
import { NftImageCard } from "@/components/nft-image-card";
import { getPaymentOrigin } from "@/lib/utils";
import WalletIframeDialog from "@/components/wallet-iframe-dialog.astro";

const paymentOrigin = getPaymentOrigin();
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="stylesheet" href="/global.css" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>SPC dApp</title>
	</head>
	<body
		class="flex flex-col items-center justify-center h-screen bg-gradient-to-t from-[#0051ff5c] to-[#0052ff]"
	>
		<h1 class="text-5xl font-bold text-white">SPC dApp</h1>
		<main class="flex flex-col items-center justify-evenly min-h-[60vh]">
			<div id="iframe-container" class="hidden">
				<iframe name="iframe" allow={`payment ${paymentOrigin}`}></iframe>
			</div>

			<main class="flex flex-row items-center justify-between min-h-[20vh]">
				<WalletIframeDialog />
				<!-- <CreatePaymentButton client:only /> -->
				<NftImageCard client:only />
			</main>
		</main>
		<script>
			import {
				WALLET_IFRAME_DIALOG_ID,
				payWithSPC,
				getPaymentDetails,
			} from "spc-lib";
			import { getPaymentOrigin, getPayeeOrigin } from "../lib/utils";

			const paymentOrigin = getPaymentOrigin();

			window.addEventListener("message", async (e) => {
				if (e.origin !== paymentOrigin) return;
				if (e.data.type === "paid") return; // TODO: recieve confirmation of payment & display feedback
				if (e.data.type === "credentials.found") {
					console.log("Credentials found", e.data);

					// - the wallet has found credentials for the username that was entered into the iframe by the user
					// - so we close the iframe and create a payment
					const iframeDialog = document.getElementById(
						WALLET_IFRAME_DIALOG_ID,
					) as HTMLDialogElement | null;

					iframeDialog?.close();
					iframeDialog?.removeAttribute("open");
					iframeDialog?.classList.add("hidden");

					// - resubmit the button click event to create the payment
					await payWithSPC(
						{
							rpId: paymentOrigin,
							allowedCredentials: [e.data.credentialId],
							challenge: "challenge",
							timeout: 60000,
						},
						getPayeeOrigin(),
						getPaymentDetails("1.00"),
						"0x123...456",
					);
				}
			});
		</script>
	</body>
</html>
